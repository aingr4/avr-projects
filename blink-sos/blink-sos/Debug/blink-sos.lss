
blink-sos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000878  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006fc  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030f  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000014ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a1  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000182  00000000  00000000  00001881  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001a03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  78:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <morse>:
	}
}

void morse(char letter) {
	
	if (letter == 's') 
  80:	83 37       	cpi	r24, 0x73	; 115
  82:	f1 f0       	breq	.+60     	; 0xc0 <morse+0x40>
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	3c c0       	rjmp	.+120    	; 0x102 <morse+0x82>
	{
		for (int i = 0; i < 3; i++) 
		{
			PORTB |= BITVALUE(RUN_LED_PIN);
  8a:	85 b1       	in	r24, 0x05	; 5
  8c:	80 62       	ori	r24, 0x20	; 32
  8e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	4f eb       	ldi	r20, 0xBF	; 191
  92:	87 e2       	ldi	r24, 0x27	; 39
  94:	99 e0       	ldi	r25, 0x09	; 9
  96:	41 50       	subi	r20, 0x01	; 1
  98:	80 40       	sbci	r24, 0x00	; 0
  9a:	90 40       	sbci	r25, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <morse+0x16>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <morse+0x20>
  a0:	00 00       	nop
			_delay_ms(DELAY_S);
			PORTB &= ~BITVALUE(RUN_LED_PIN);
  a2:	85 b1       	in	r24, 0x05	; 5
  a4:	8f 7d       	andi	r24, 0xDF	; 223
  a6:	85 b9       	out	0x05, r24	; 5
  a8:	4f eb       	ldi	r20, 0xBF	; 191
  aa:	87 e2       	ldi	r24, 0x27	; 39
  ac:	99 e0       	ldi	r25, 0x09	; 9
  ae:	41 50       	subi	r20, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <morse+0x2e>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <morse+0x38>
  b8:	00 00       	nop

void morse(char letter) {
	
	if (letter == 's') 
	{
		for (int i = 0; i < 3; i++) 
  ba:	2f 5f       	subi	r18, 0xFF	; 255
  bc:	3f 4f       	sbci	r19, 0xFF	; 255
  be:	02 c0       	rjmp	.+4      	; 0xc4 <morse+0x44>
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	23 30       	cpi	r18, 0x03	; 3
  c6:	31 05       	cpc	r19, r1
  c8:	04 f3       	brlt	.-64     	; 0x8a <morse+0xa>
  ca:	08 95       	ret
	} 
	else 
	{
		for (int i = 0; i < 3; i++) 
		{
			PORTB ^= BITVALUE(RUN_LED_PIN);
  cc:	95 b1       	in	r25, 0x05	; 5
  ce:	80 e2       	ldi	r24, 0x20	; 32
  d0:	89 27       	eor	r24, r25
  d2:	85 b9       	out	0x05, r24	; 5
  d4:	4f ef       	ldi	r20, 0xFF	; 255
  d6:	89 e6       	ldi	r24, 0x69	; 105
  d8:	98 e1       	ldi	r25, 0x18	; 24
  da:	41 50       	subi	r20, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <morse+0x5a>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <morse+0x64>
  e4:	00 00       	nop
			_delay_ms(DELAY_O);
			PORTB &= ~BITVALUE(RUN_LED_PIN);
  e6:	85 b1       	in	r24, 0x05	; 5
  e8:	8f 7d       	andi	r24, 0xDF	; 223
  ea:	85 b9       	out	0x05, r24	; 5
  ec:	4f eb       	ldi	r20, 0xBF	; 191
  ee:	87 e2       	ldi	r24, 0x27	; 39
  f0:	99 e0       	ldi	r25, 0x09	; 9
  f2:	41 50       	subi	r20, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <morse+0x72>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <morse+0x7c>
  fc:	00 00       	nop
			_delay_ms(DELAY_S);
		}
	} 
	else 
	{
		for (int i = 0; i < 3; i++) 
  fe:	2f 5f       	subi	r18, 0xFF	; 255
 100:	3f 4f       	sbci	r19, 0xFF	; 255
 102:	23 30       	cpi	r18, 0x03	; 3
 104:	31 05       	cpc	r19, r1
 106:	14 f3       	brlt	.-60     	; 0xcc <morse+0x4c>
 108:	08 95       	ret

0000010a <main>:

void morse(char letter);

int main() {

	DDRB |= BITVALUE(RUN_LED_PIN);
 10a:	84 b1       	in	r24, 0x04	; 4
 10c:	80 62       	ori	r24, 0x20	; 32
 10e:	84 b9       	out	0x04, r24	; 4

	while (true) {
		morse('s');
 110:	83 e7       	ldi	r24, 0x73	; 115
 112:	0e 94 40 00 	call	0x80	; 0x80 <morse>
		morse('o');
 116:	8f e6       	ldi	r24, 0x6F	; 111
 118:	0e 94 40 00 	call	0x80	; 0x80 <morse>
		morse('s');
 11c:	83 e7       	ldi	r24, 0x73	; 115
 11e:	0e 94 40 00 	call	0x80	; 0x80 <morse>
 122:	2f e7       	ldi	r18, 0x7F	; 127
 124:	84 e8       	ldi	r24, 0x84	; 132
 126:	9e e1       	ldi	r25, 0x1E	; 30
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0x1e>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x28>
 132:	00 00       	nop
 134:	ed cf       	rjmp	.-38     	; 0x110 <main+0x6>

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
